"""
This type stub file was generated by pyright.
"""

"""
    Events
    ~~~~~~

    Implements C#-Style Events.

    Derived from the original work by Zoran Isailovski:
    http://code.activestate.com/recipes/410686/ - Copyright (c) 2005

    :copyright: (c) 2014-2017 by Nicola Iarocci.
    :license: BSD, see LICENSE for more details.
"""
class _EventSlot:
    def __init__(self, name) -> None:
        ...
    
    def __repr__(self): # -> LiteralString:
        ...
    
    def __call__(self, *a, **kw): # -> None:
        ...
    
    def __iadd__(self, f): # -> Self@_EventSlot:
        ...
    
    def __isub__(self, f): # -> Self@_EventSlot:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __iter__(self): # -> Generator[Unknown, None, None]:
        ...
    
    def __getitem__(self, key):
        ...
    


class EventsException(Exception):
    ...


class Events:
    """
    Encapsulates the core to event subscription and event firing, and feels
    like a "natural" part of the language.

    The class Events is there mainly for 3 reasons:

        - Events (Slots) are added automatically, so there is no need to
        declare/create them separately. This is great for prototyping. (Note
        that `__events__` is optional and should primarilly help detect
        misspelled event names.)
        - To provide (and encapsulate) some level of introspection.
        - To "steel the name" and hereby remove unneeded redundancy in a call
        like:

            xxx.OnChange = event('OnChange')
    """
    def __init__(self, events=..., event_slot_cls=...) -> None:
        ...
    
    def __getattr__(self, name): # -> _EventSlot:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    __str__ = ...
    def __len__(self): # -> int:
        ...
    
    def __iter__(self): # -> Generator[_EventSlot, None, None]:
        ...
    


